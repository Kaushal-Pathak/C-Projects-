#include <iostream>
#include <conio.h>   // For _kbhit() and _getch()
#include <windows.h> // For Sleep()
#include <vector>
#include <cstdlib>

using namespace std;

bool gameOver;
const int width = 20;
const int height = 20;
int x, y, fruitX, fruitY, score;
enum Direction { STOP = 0, LEFT, RIGHT, UP, DOWN };
Direction dir;
vector<pair<int, int>> snake;

void Setup() {
    gameOver = false;
    dir = STOP;
    x = width / 2;
    y = height / 2;
    snake.clear();
    snake.push_back({x, y});
    fruitX = rand() % width;
    fruitY = rand() % height;
    score = 0;
}

void Draw() {
    system("cls");
    for (int i = 0; i < width + 2; i++) cout << "#";
    cout << endl;

    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            if (j == 0) cout << "#";

            bool printed = false;
            for (int k = 0; k < snake.size(); k++) {
                if (snake[k].first == j && snake[k].second == i) {
                    cout << (k == 0 ? "O" : "o");
                    printed = true;
                    break;
                }
            }

            if (!printed) {
                if (j == fruitX && i == fruitY)
                    cout << "F";
                else
                    cout << " ";
            }

            if (j == width - 1) cout << "#";
        }
        cout << endl;
    }

    for (int i = 0; i < width + 2; i++) cout << "#";
    cout << endl;

    cout << "Score: " << score << endl;
}

void Input() {
    if (_kbhit()) {
        switch (_getch()) {
        case 'a': dir = LEFT; break;
        case 'd': dir = RIGHT; break;
        case 'w': dir = UP; break;
        case 's': dir = DOWN; break;
        case 'x': gameOver = true; break;
        }
    }
}

void Logic() {
    int prevX = snake[0].first;
    int prevY = snake[0].second;
    int newX = prevX, newY = prevY;

    switch (dir) {
    case LEFT: newX--; break;
    case RIGHT: newX++; break;
    case UP: newY--; break;
    case DOWN: newY++; break;
    default: return;
    }

    // Check wall collision
    if (newX >= width || newX < 0 || newY >= height || newY < 0) {
        gameOver = true;
        return;
    }

    // Move body
    for (int i = snake.size() - 1; i > 0; i--) {
        snake[i] = snake[i - 1];
    }
    snake[0] = {newX, newY};

    // Check self collision
    for (int i = 1; i < snake.size(); i++) {
        if (snake[i].first == newX && snake[i].second == newY) {
            gameOver = true;
            return;
        }
    }

    // Eat fruit
    if (newX == fruitX && newY == fruitY) {
        score += 10;
        fruitX = rand() % width;
        fruitY = rand() % height;
        snake.push_back({-1, -1}); // Placeholder, corrected next loop
    }
}

int main() {
    Setup();
    while (!gameOver) {
        Draw();
        Input();
        Logic();
        Sleep(100); // Controls speed
    }
    cout << "Game Over!" << endl;
    return 0;
}
